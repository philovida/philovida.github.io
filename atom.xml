<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萤火</title>
  
  <subtitle>Philovida</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2019-08-06T01:42:18.000Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>青崖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows安装python虚拟环境</title>
    <link href="http://localhost:4000/post/windows%E5%AE%89%E8%A3%85python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://localhost:4000/post/windows安装python虚拟环境/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-08-06T01:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用virtualenv安装虚拟环境</p><a id="more"></a><p>使用虚拟环境安装Flask，可以避免包的混乱和版本的冲突，虚拟环境是Python解释器的副本，在虚拟环境中你可以安装扩展包，为每个程序单独创建的虚拟环境，可以保证程序只能访问虚拟环境中的包。而不会影响系统中安装的全局Python解释器，从而保证全局解释器的整洁。</p><h2 id="安装">安装<a href="post/windows安装python虚拟环境#安装"></a></h2><p>安装virtualenv</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></div></figure><p>安装virtualenv的win驱动</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenvwrapper-win</span><br></pre></td></tr></table></div></figure><h2 id="创建虚拟环境">创建虚拟环境<a href="post/windows安装python虚拟环境#创建虚拟环境"></a></h2><p>首先创建一个虚拟环境的目录，以flask_py为例。<br>进入目录中执行命令</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv Flask_py <span class="comment">#将该目录设置成虚拟环境</span></span><br></pre></td></tr></table></div></figure><p>执行后，自动启用了该虚拟环境。到这里安装便结束了。</p><h2 id="命令">命令<a href="post/windows安装python虚拟环境#命令"></a></h2><p>进入虚拟环境<code>workon Flask.py</code><br>退出虚拟环境<code>deactivate Flask.py</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用virtualenv安装虚拟环境&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://localhost:4000/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装部署Redis服务</title>
    <link href="http://localhost:4000/post/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Redis%E6%9C%8D%E5%8A%A1/"/>
    <id>http://localhost:4000/post/Windows下安装部署Redis服务/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2019-08-06T12:13:45.062Z</updated>
    
    <content type="html"><![CDATA[<p>windows系统下redis服务的安装</p><a id="more"></a><p>引用自：<a href="https://www.cnblogs.com/weiqinl/p/6490372.html" target="_blank" rel="noopener">https://www.cnblogs.com/weiqinl/p/6490372.html</a><br>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。<br>由于用于开发电脑是windows，记录下windows环境下redis服务的安装</p><h2 id="redis安装">redis安装<a href="post/Windows下安装部署Redis服务#redis安装"></a></h2><h3 id="下载">下载<a href="post/Windows下安装部署Redis服务#下载"></a></h3><p><code>windows版本：https://github.com/MSOpenTech/redis/releases</code><br>安装版：在打开的github页面中，找到Latest release版本下面的Redis-x64-3.0.504.msi，下它！<br>源码版：在打开的github页面中，找到Latest release版本下面的Redis-x64-3.0.504.zip。下它！<br>由于安装版会直接写入windows服务，比较方便。下面讨论的是源码版的安装。</p><h3 id="解压安装">解压安装<a href="post/Windows下安装部署Redis服务#解压安装"></a></h3><p>将下载好的安装包解压缩到任意一个目录。我的安装目录是<code>D:\app\Redis-x64-3.0.504</code></p><h3 id="验证">验证<a href="post/Windows下安装部署Redis服务#验证"></a></h3><p>使用cmd进入redis安装目录，以我本地环境为例：</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到D盘</span></span><br><span class="line">C:\Users\user&gt;D:</span><br><span class="line"><span class="comment"># 进入redis安装目录</span></span><br><span class="line">D:\&gt;<span class="built_in">cd</span> app\Redis-x64-3.0.504</span><br></pre></td></tr></table></div></figure><p>启动redis-server.exe、</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\app\Redis-x64-3.0.504&gt;redis-server.exe</span><br></pre></td></tr></table></div></figure><p>出现下面的效果，说明服务启动成功</p><p><img src="%5Cimages%5Credis-install-windows%5Credis-server.png" alt="启动Redis-server" class="article-img"></p><p>再启动一个cmd窗口，同样进入redis安装目录，启动redis-cli.exe，连接我们刚刚启动好的server</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\app\Redis-x64-3.0.504&gt;redis-cli.exe</span><br></pre></td></tr></table></div></figure><p>出现下面的效果，说明客户端启动成功</p><p><img src="images%5Credis-install-windows%5Credis-cli.png" alt="启动Redis-cli" class="article-img"></p><h2 id="部署">部署<a href="post/Windows下安装部署Redis服务#部署"></a></h2><p>上面的方法，只要关闭了redis-server的命令行窗口，服务就会停掉。所以我们需要把redis设置为一个windows服务。<br>在redis安装目录中，使用下面命令进行安装。</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">redis-server.exe --service-install redis.windows.conf</span><br></pre></td></tr></table></div></figure><p>安装成功如下图所示：</p><p><img src="images%5Credis-install-windows%5Credis-server-deploy.png" alt="安装windows服务" class="article-img"></p><p><img src="D:%5Cdev%5Cblog%5Csource%5Cimages%5Credis-install-windows%5Credis-server-deploy-ok.png" alt class="article-img"></p><h2 id="常用redis服务命令">常用redis服务命令<a href="post/Windows下安装部署Redis服务#常用redis服务命令"></a></h2><ul><li>卸载服务：<code>redis-server --service-uninstall</code></li><li>开启服务：<code>redis-server --service-start</code></li><li>停止服务：<code>redis-server --service-stop</code></li><li>重命名服务：<code>redis-server --service-name name</code></li></ul><p>例子如下：启动两个不同的Redis实例作为服务</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装服务1</span></span><br><span class="line">redis-server --server-install --service-name redisService1 --port 10001</span><br><span class="line"><span class="comment"># 启动服务1</span></span><br><span class="line">redis-server --service-start --service-name redisService1</span><br><span class="line"><span class="comment"># 安装服务2</span></span><br><span class="line">redis-server --server-install --service-name redisService1 --port 10002</span><br><span class="line"><span class="comment"># 启动服务2</span></span><br><span class="line">redis-server --service-start --service-name redisService2</span><br></pre></td></tr></table></div></figure><h2 id="部署验证">部署验证<a href="post/Windows下安装部署Redis服务#部署验证"></a></h2><h3 id="启动服务">启动服务<a href="post/Windows下安装部署Redis服务#启动服务"></a></h3><figure class="highlight vala"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 同样要在redis的安装目录执行。</span></span><br><span class="line"><span class="meta"># 或者将Redis目录加入到系统变量path中，可以在任意地方用命令行执行。</span></span><br><span class="line">redis-server --service-start</span><br></pre></td></tr></table></div></figure><h3 id="测试">测试<a href="post/Windows下安装部署Redis服务#测试"></a></h3><p>打开redis-cli.exe，进行读写数据测试（由于我的环境已经把redis目录加入了path，所以直接执行redis-cli.exe）</p><figure class="highlight bash"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli.exe</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 2019 hello</span><br><span class="line"><span class="comment"># 返回值：OK</span></span><br><span class="line">127.0.0.1:6379&gt; get 2019</span><br><span class="line"><span class="comment"># 返回值："hello"</span></span><br></pre></td></tr></table></div></figure><p>到这里验证成功，说明redis服务已经成功安装了。</p><h3 id="工具推荐">工具推荐<a href="post/Windows下安装部署Redis服务#工具推荐"></a></h3><p>推荐一款Redis可视化链接工具，叫Redis Destop Manager。</p><p><img src="images%5Credis-install-windows%5Credis-destop-manager.png" alt class="article-img"></p><p>官网地址：<a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a><br>虽说是开源的，但在官网上面没有找到免费下载的地方，不过其他网站搜搜还是能搜索到的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows系统下redis服务的安装&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="http://localhost:4000/categories/program/"/>
    
    
      <category term="redis" scheme="http://localhost:4000/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Http协议</title>
    <link href="http://localhost:4000/post/Http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://localhost:4000/post/Http协议/</id>
    <published>2019-08-02T16:00:00.000Z</published>
    <updated>2019-08-03T08:32:26.517Z</updated>
    
    <content type="html"><![CDATA[<p>http协议学习</p><a id="more"></a><h2 id="http协议">http协议<a href="post/Http协议#http协议"></a></h2><h3 id="http协议通俗讲解">http协议通俗讲解<a href="post/Http协议#http协议通俗讲解"></a></h3><h4 id="通过网络调试助手接受http请求">通过网络调试助手接受http请求<a href="post/Http协议#通过网络调试助手接受http请求"></a></h4><p>1) 将网络调试助手设置成TCP服务器，ip为127.0.0.1，端口为8080<br>2) 在浏览器网址处输入：127.0.0.1:8080，可以看到网络调试助手中收到了请求。</p><figure class="highlight http"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 请求格式</span><br><span class="line">【Receive from 127.0.0.1 : 51437】：GET / HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8080</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: pageNo=1; pageSize=10</span><br></pre></td></tr></table></div></figure><figure class="highlight"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># header（应答格式）</span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK                   # 必须有</span><br><span class="line"><span class="attribute">Bdpagetype</span>: 1</span><br><span class="line"><span class="attribute">Bdqid</span>: 0xfb356cc60008504e</span><br><span class="line"><span class="attribute">Cache-Control</span>: private</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="attribute">Cxy_all</span>: baidu+aa0567522ab3525001c86f4d0d3cb993</span><br><span class="line"><span class="attribute">Date</span>: Thu, 11 Apr 2019 08:33:38 GMT</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 11 Apr 2019 08:32:59 GMT</span><br><span class="line"><span class="attribute">Server</span>: BWS/1.1</span><br><span class="line"><span class="attribute">Set-Cookie</span>: delPer=0; path=/; domain=.baidu.com  </span><br><span class="line"><span class="attribute">Set-Cookie</span>: BDSVRTM=0; path=/</span><br><span class="line"><span class="attribute">Set-Cookie</span>: BD_HOME=0; path=/</span><br><span class="line"><span class="attribute">Set-Cookie</span>: H_PS_PSSID=1430_28793_21106_28769_28724_28557_28838_28585_28640_26350_28603_28627_28605; path=/; domain=.baidu.com</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span>: max-age=172800</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"><span class="attribute">X-Ua-Compatible</span>: IE=Edge,chrome=1</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line"># body（应答体） 第一个空行下面的都是body</span><br></pre></td></tr></table></div></figure><blockquote><p>Set-Cookie: H_PS_PSSID=1430_28793_21106_28769_28724_28557_28838_28585_28640_26350_28603_28627_28605; path=/; domain=.baidu.com<br>意思是浏览器创建一个H_PS_PSSID变量来存储后面的值，如果访问百度网站就会把这串cookie发过去，用来标识”你是谁”。服务器可以根据你的身份及历史行为，通过阿里妈妈发送营销广告。</p></blockquote><blockquote><p>1688.com是阿里批发的网站，有些淘宝店收到订单会联系1688发货，从而赚取差价。</p></blockquote><h4 id="python编写简单tcp服务器">python编写简单tcp服务器<a href="post/Http协议#python编写简单tcp服务器"></a></h4><figure class="highlight python"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_deal</span><span class="params">(client_socket)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接受对方发送的请求</span></span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'接收到的数据为:'</span>, recv_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置返回内容，只要接受到请求，就返回</span></span><br><span class="line">        send_data = <span class="string">'HTTP/1.1 200 OK\r\n\r\n&lt;h1&gt;hahahaha&lt;/h1&gt;'</span></span><br><span class="line">        client_socket.send(send_data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 关闭socket</span></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket套接字</span></span><br><span class="line">    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置本地的IP、端口</span></span><br><span class="line">    addr = (<span class="string">''</span>, <span class="number">1207</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    tcp_socket.bind(addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启listen监听</span></span><br><span class="line">    tcp_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为客户端持续提供服务</span></span><br><span class="line">        client_socket, client_addr = tcp_socket.accept()</span><br><span class="line">        <span class="comment"># 处理请求</span></span><br><span class="line">        server_deal(client_socket)</span><br><span class="line"></span><br><span class="line">    tcp_socket.close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></div></figure><blockquote><p>该程序，如果强制停止的话，立即重新启动会报错：端口被占用。因为先调用close的要等待一段时间才能关闭，详情见tcp四次挥手</p></blockquote><figure class="highlight css"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过该代码使得服务器调用<span class="selector-tag">close</span>后立即释放资源</span><br><span class="line"><span class="selector-tag">server_socket</span><span class="selector-class">.setsockopt</span>(<span class="selector-tag">socket</span><span class="selector-class">.SOL_SOCKET</span>, <span class="selector-tag">socket</span><span class="selector-class">.SO_REUSEADDR</span>, 1)</span><br></pre></td></tr></table></div></figure><h4 id="tcp三次握手、四次挥手">tcp三次握手、四次挥手<a href="post/Http协议#tcp三次握手、四次挥手"></a></h4><h4 id="单进程-单线程-多任务tcp服务器">单进程-单线程-多任务tcp服务器<a href="post/Http协议#单进程-单线程-多任务tcp服务器"></a></h4><figure class="highlight python"><div><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">7890</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line">SOCK_LIST = list() <span class="comment"># 用来存储请求的客户端socket</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_socket</span><span class="params">(tcpCliSock, recv_data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接受客户端请求</span></span><br><span class="line">    <span class="comment"># recv_data = tcpCliSock.recv(BUFSIZ)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断客户端请求的资源,将文件名找出来</span></span><br><span class="line">    req_dgram = recv_data.decode(<span class="string">'utf-8'</span>).splitlines()</span><br><span class="line">    ret = re.match(<span class="string">'[^/]*(/[^ ]*)'</span>, req_dgram[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> file_name == <span class="string">'/'</span>:</span><br><span class="line">            file_name = <span class="string">'/index.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据请求资源，打开对应文件并读取内容</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">'tcp_server/html'</span>+ file_name, <span class="string">'rb'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        response_body = <span class="string">'文件没有找到'</span></span><br><span class="line">        response_header = <span class="string">'HTTP/1.1 404 NOT FOUND\r\n'</span></span><br><span class="line">        response_header += <span class="string">'Content-Type:text/html; charset=UTF-8\r\n'</span></span><br><span class="line">        response_header += <span class="string">'\r\n'</span></span><br><span class="line">        response = response_header.encode(<span class="string">'utf-8'</span>) + response_body.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 组装应答报文</span></span><br><span class="line">        response_body = html_content</span><br><span class="line">        response_header = <span class="string">'HTTP/1.1 200 OK\r\n'</span></span><br><span class="line">        response_header += <span class="string">'Content-Length:%d\r\n'</span>% len(response_body)</span><br><span class="line">        response_header += <span class="string">'\r\n'</span></span><br><span class="line">        response = response_header.encode(<span class="string">'utf-8'</span>) + response_body</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    tcpCliSock.send(response)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    <span class="comment"># tcpCliSock.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    tcpSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绑定端口</span></span><br><span class="line">    tcpSock.bind(ADDR)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启用监听</span></span><br><span class="line">    tcpSock.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将服务器套接字设置成非堵塞</span></span><br><span class="line">    tcpSock.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置被动套接字，为客户端提供服务.</span></span><br><span class="line">        <span class="comment"># 非堵塞accept如果没有客户端请求，则会报异常，因此用try来处理异常情况。</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tcpCliSock, addr = tcpSock.accept()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            print(<span class="string">'还没有客户端来连接'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tcpCliSock.setblocking(<span class="literal">False</span>)</span><br><span class="line">            print(<span class="string">'&gt;&gt;&gt;&gt;&gt;来了一个客户端&gt;&gt;&gt;&gt;&gt;'</span>)</span><br><span class="line">            SOCK_LIST.append(tcpCliSock)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># recv非堵塞时，如果没有收到数据会报异常。同样使用try来处理异常情况</span></span><br><span class="line">        <span class="keyword">for</span> client <span class="keyword">in</span> SOCK_LIST: </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                recv_data = client.recv(BUFSIZ)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">                print(<span class="string">'*****客户端怎么还不发送数据呢*******'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> recv_data:</span><br><span class="line">                    server_socket(tcpCliSock, recv_data)</span><br><span class="line">                <span class="comment"># 如果客户端发送的数据为空，意味着客户端断开连接</span></span><br><span class="line">                <span class="comment"># 先将客户端socket关闭</span></span><br><span class="line">                <span class="comment"># 再将list中的客户端socket删除</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    client.close()</span><br><span class="line">                    SOCK_LIST.remove(client)</span><br><span class="line">    </span><br><span class="line">    tcpSock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></div></figure><blockquote><p>问题1：在打开html文件的时候，一直提示No such file or directory。检查发现html文件相对路径与代码相比没有问题，但是由于是在vscode终端运行，终端提示符的位置是在代码的上层目录，所以相对路径就不能以代码为准，而要以终端运行的位置为准。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http协议学习&lt;/p&gt;
    
    </summary>
    
      <category term="program" scheme="http://localhost:4000/categories/program/"/>
    
    
      <category term="front-end" scheme="http://localhost:4000/tags/front-end/"/>
    
  </entry>
  
</feed>
